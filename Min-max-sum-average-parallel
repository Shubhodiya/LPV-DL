#include <iostream>
#include <omp.h>
#include <vector>
#include <climits>

using namespace std;

void min_red(int arr[], int n)
{
    int min_value=INT_MAX;
    #pragma omp parallel for reduction (min:min_value)
    for(int i=0;i<n;i++)
    {
        if (arr[i]<min_value)
        {
            min_value=arr[i];
        }

    }
    cout<<"Min is: "<<min_value<<endl;;
}
void max_red(int arr[],int n)
{
    int max_value=INT_MIN;
    #pragma omp parallel for reduction(max:max_value)
    for(int i=0;i<n;i++)
    {
        if (arr[i]>max_value)
                {
                    max_value=arr[i];
                }
    }
    cout<<"Max is: "<<max_value<<endl;
}
void sum_avg_red(int arr[], int n)
{
    int sum=0;
    #pragma omp parallel for reduction (+:sum)
    for(int i=0;i<n;i++){
        sum+=arr[i];
    }
    cout<<"Sum is: "<<sum<<endl;
    cout<<"Average is: "<<(double)sum/(n-1)<<endl;
}
int main()
{
    int *arr, n;
    cout << "Enter number of elements:";
    cin>>n;
    arr=new int[n];
    cout<<"Enter elements: ";
    for (int i=0;i<n;i++)
    {
        cin>>arr[i];
    }
    min_red(arr,n);
    max_red(arr,n);
    sum_avg_red(arr,n);
    return 0;
}
